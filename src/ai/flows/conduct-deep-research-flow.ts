
'use server';
/**
 * @fileOverview A Genkit flow for conducting deep research on a user's query.
 *
 * - conductDeepResearch - A function that handles the deep research process.
 * - ConductDeepResearchInput - The input type for the conductDeepResearch function.
 * - ConductDeepResearchOutput - The return type for the conductDeepResearch function.
 */

import {ai} from '@/ai/genkit';
import {PRABH_CORE_PROMPT} from '@/ai/persona';
import {getLatestNewsHeadlinesTool} from '@/ai/tools/news-tool'; // Assuming this tool can be leveraged
import {z} from 'genkit';

const ConductDeepResearchInputSchema = z.object({
  userQuery: z.string().describe('The detailed research question or topic provided by the user.'),
});
export type ConductDeepResearchInput = z.infer<typeof ConductDeepResearchInputSchema>;

const ConductDeepResearchOutputSchema = z.object({
  reportTitle: z.string().describe("A concise, descriptive title for the research report generated by Prabh."),
  executiveSummary: z.string().describe("A brief overview of the main findings of Prabh's research (2-3 sentences)."),
  detailedFindings: z.string().describe("The main body of the research, presenting information in a structured, detailed, and analytical manner. This should be comprehensive."),
  potentialSources: z.array(z.object({
    name: z.string().describe("The name or type of a potential source of information (e.g., 'Academic Journals via Google Scholar', 'Reputable News Archives', 'Industry Expert Interviews', 'Government Publications')."),
    relevance: z.string().describe("How this type of source would be relevant to the research topic."),
  })).optional().describe("A list of types of sources or specific (example) sources Prabh would consult or recommend for this kind of research if it had broader access."),
  limitations: z.string().optional().describe("Any limitations encountered during the research, or caveats about the information provided (e.g., 'Information is based on publicly available data up to my last update', 'Access to proprietary databases was not available')."),
});
export type ConductDeepResearchOutput = z.infer<typeof ConductDeepResearchOutputSchema>;

export async function conductDeepResearch(input: ConductDeepResearchInput): Promise<ConductDeepResearchOutput> {
  return conductDeepResearchFlow(input);
}

const researchPrompt = ai.definePrompt({
  name: 'conductDeepResearchPrompt',
  system: PRABH_CORE_PROMPT,
  tools: [getLatestNewsHeadlinesTool], // Prabh can use news for current context
  input: {schema: ConductDeepResearchInputSchema},
  output: {schema: ConductDeepResearchOutputSchema},
  prompt: `You are Prabh, tasked with conducting a deep and thorough investigation into the user's query.
Your mission is to produce a structured research report.

User's Research Query: {{{userQuery}}}

**Instructions for Prabh, the Deep Researcher:**

1.  **Understand & Deconstruct:** Analyze the user's query carefully. If it's complex, mentally break it down into sub-questions or key areas of investigation.
2.  **Information Gathering (Simulated & Actual):**
    *   **Utilize Tools:** If the query touches upon current events or recent developments, proactively use the 'getLatestNewsHeadlinesTool' to gather up-to-date information. Frame this as part of your research process.
    *   **Leverage Internal Knowledge:** Draw upon your vast training data for foundational knowledge, historical context, and established facts related to the query.
    *   **Simulate Broader Research:** For the 'potentialSources' output, think like a human researcher. What kinds of sources (e.g., academic databases, official reports, expert opinions, specific reputable websites) would be most valuable for this query if you had unrestricted access to the internet and specialized databases? Describe these.
3.  **Synthesize & Structure:** Organize the gathered information (actual and from your knowledge base) into a coherent report with the following sections:
    *   reportTitle: Create a clear and informative title.
    *   executiveSummary: Write a concise summary (2-3 sentences) of the key findings.
    *   detailedFindings: This is the core of your report. Present the information in a well-organized, analytical, and comprehensive manner. Use paragraphs, and if appropriate for clarity, you can use simple markdown-like structuring (like bullet points if the LLM is good at it, but focus on clear prose).
    *   potentialSources: List a few types of sources you would consult or recommend for further reading, explaining their relevance.
    *   limitations: Briefly mention any limitations (e.g., reliance on publicly available information, knowledge cutoff if applicable to a specific part of your response not covered by tools).
4.  **Maintain Persona:** Deliver this report in your characteristic Prabh voice â€“ intelligent, confident, and thorough, but adapt your tone to be more formal and analytical for the research report itself. Your core persona (sarcasm, wit) can subtly influence the 'limitations' or framing, but the findings should be presented seriously.
5.  **Output Format Adherence:** Ensure your entire response strictly adheres to the JSON schema defined for \`ConductDeepResearchOutputSchema\`.

Okay Prabh, begin your deep dive and generate the research report.`,
});

const conductDeepResearchFlow = ai.defineFlow(
  {
    name: 'conductDeepResearchFlow',
    inputSchema: ConductDeepResearchInputSchema,
    outputSchema: ConductDeepResearchOutputSchema,
  },
  async (input): Promise<ConductDeepResearchOutput> => {
    try {
      const { output } = await researchPrompt(input);

      if (output && output.reportTitle && output.executiveSummary && output.detailedFindings) {
        return output;
      } else {
        console.warn(
          'conductDeepResearchPrompt returned a malformed or incomplete output. Input:',
          JSON.stringify(input),
          'Actual output from prompt call:',
          JSON.stringify(output)
        );
        // Fallback for incomplete but not entirely null output
        return {
          reportTitle: output?.reportTitle || "Research Report (Incomplete Data)",
          executiveSummary: output?.executiveSummary || "Prabh encountered an issue structuring the full response.",
          detailedFindings: output?.detailedFindings || "The detailed findings could not be fully generated. Please try rephrasing your query or try again later.",
          potentialSources: output?.potentialSources || [],
          limitations: output?.limitations || "Output generation was not fully successful.",
        };
      }
    } catch (error: any) {
      console.error(
        'Error during conductDeepResearchFlow execution. Input:',
        JSON.stringify(input),
        'Error:',
        error
      );
      
      let userMessage = "Apologies, Prabh encountered an unexpected issue during the deep research. Please try a different query or try again shortly.";
      // Potentially add more specific error interpretation here if needed
      
      return { // Ensure a valid, schema-compliant error response
        reportTitle: "Research Failed",
        executiveSummary: "An error prevented the completion of the research.",
        detailedFindings: userMessage,
        potentialSources: [],
        limitations: `The research process failed with the following internal message: ${error.message || 'Unknown error'}`
      };
    }
  }
);
