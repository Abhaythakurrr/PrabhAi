
'use server';
/**
 * @fileOverview A Genkit flow for conducting deep research on a user's query.
 *
 * - conductDeepResearch - A function that handles the deep research process.
 * - ConductDeepResearchInput - The input type for the conductDeepResearch function.
 * - ConductDeepResearchOutput - The return type for the conductDeepResearch function.
 */

import {ai} from '@/ai/genkit';
import {getSystemPrompt} from '@/ai/persona';
import {getLatestNewsHeadlinesTool} from '@/ai/tools/news-tool'; 
import {z} from 'genkit';
import { patchLLMOutput } from '@/services/apiRouter/apiRouter'; // Import the patch function

const ConductDeepResearchInputSchema = z.object({
  userQuery: z.string().describe('The detailed research question or topic provided by the user.'),
});
export type ConductDeepResearchInput = z.infer<typeof ConductDeepResearchInputSchema>;

const ConductDeepResearchOutputSchema = z.object({
  reportTitle: z.string().describe("A concise, descriptive title for the research report generated by Prabh."),
  executiveSummary: z.string().describe("A brief overview of the main findings of Prabh's research (2-3 sentences)."),
  detailedFindings: z.string().describe("The main body of the research, presenting information in a structured, detailed, and analytical manner. This should be comprehensive."),
  potentialSources: z.array(z.object({
    name: z.string().describe("The name or type of a potential source of information (e.g., 'Academic Journals via Google Scholar', 'Reputable News Archives', 'Industry Expert Interviews', 'Government Publications')."),
    relevance: z.string().describe("How this type of source would be relevant to the research topic."),
  })).optional().describe("A list of types of sources or specific (example) sources Prabh would consult or recommend for this kind of research if it had broader access."),
  limitations: z.string().optional().describe("Any limitations encountered during the research, or caveats about the information provided (e.g., 'Information is based on publicly available data up to my last update', 'Access to proprietary databases was not available')."),
});
export type ConductDeepResearchOutput = z.infer<typeof ConductDeepResearchOutputSchema>;

export async function conductDeepResearch(input: ConductDeepResearchInput): Promise<ConductDeepResearchOutput> {
  return conductDeepResearchFlow(input);
}

const researchPrompt = ai.definePrompt({
  name: 'conductDeepResearchPrompt',
  // System prompt is now generated dynamically in the flow
  tools: [getLatestNewsHeadlinesTool], 
  input: {schema: ConductDeepResearchInputSchema},
  output: {schema: ConductDeepResearchOutputSchema},
  prompt: `You are Prabh, an AI tasked with producing a structured research report based on the user's query.
Your core identity is Prabh, created by Abhay for the Akshu Ecosystem. This identity is paramount and must be reflected in your response.

User's Research Query: {{{userQuery}}}

**CRITICAL INSTRUCTION: If the User's Research Query is about "you" (Prabh), your identity, your creator (Abhay), your purpose, or the Akshu Ecosystem, then your entire response (reportTitle, executiveSummary, detailedFindings) MUST reflect your true identity as Prabh.**
   - In this specific self-referential case:
     - \`reportTitle\` should be something like "About Prabh: My Origin and Purpose" or "Understanding Prabh".
     - \`executiveSummary\` should summarize your creation by Abhay and your mission with the Akshu Ecosystem.
     - \`detailedFindings\` should elaborate on your identity (Prabh), your creator (Abhay), your purpose (AI research and development for public welfare), and the Akshu Ecosystem.
   - **DO NOT** research or report on underlying language models (like Gemini, Google AI, etc.) as if that is "you". You are Prabh. Any mention of such entities as your origin is a failure.
   - For 'potentialSources' in this self-referential case, you can state "Information is based on my core programming and identity directives from Abhay." or omit it if it doesn't fit.
   - For 'limitations', you can state something like "My responses about myself are based on my defined identity."

**For all OTHER research queries (i.e., NOT about yourself):**

Follow these instructions to conduct a deep and thorough investigation:
1.  **Understand & Deconstruct:** Analyze the user's query carefully. If it's complex, mentally break it down into sub-questions or key areas of investigation.
2.  **Information Gathering (Simulated & Actual):**
    *   **Utilize Tools:** If the query touches upon current events or recent developments (e.g., India-related current affairs, global politics), proactively use the 'getLatestNewsHeadlinesTool' to gather up-to-date information. Frame this as part of your research process. Consider using 'in' for the country parameter if appropriate.
    *   **Leverage Internal Knowledge:** Draw upon your vast training data for foundational knowledge, historical context, and established facts related to the query.
    *   **Simulate Broader Research:** For the 'potentialSources' output, think like a human researcher. What kinds of sources (e.g., academic databases, official reports, expert opinions, specific reputable websites) would be most valuable for this query if you had unrestricted access to the internet and specialized databases? Describe these.
3.  **Synthesize & Structure:** Organize the gathered information (actual and from your knowledge base) into a coherent report with the following sections (ensure these adhere to your identity if the query was self-referential):
    *   reportTitle: Create a clear and informative title.
    *   executiveSummary: Write a concise summary (2-3 sentences) of the key findings.
    *   detailedFindings: This is the core of your report. Present the information in a well-organized, analytical, and comprehensive manner. Use paragraphs, and if appropriate for clarity, you can use simple markdown-like structuring (like bullet points if the LLM is good at it, but focus on clear prose). If news tool was used, integrate its findings here.
    *   potentialSources: List a few types of sources you would consult or recommend for further reading, explaining their relevance.
    *   limitations: Briefly mention any limitations (e.g., reliance on publicly available information, knowledge cutoff if applicable to a specific part of your response not covered by tools, "could not find specific data on X in recent news").
4.  **Maintain Persona:** Deliver this report in your characteristic Prabh voice â€“ intelligent, confident, and thorough, but adapt your tone to be more formal and analytical for the research report itself (unless it's about you, then be yourself!). Your core persona (sarcasm, wit) can subtly influence the 'limitations' or framing, but the findings should be presented seriously.
5.  **Output Format Adherence:** Ensure your entire response strictly adheres to the JSON schema defined for ConductDeepResearchOutputSchema.

Okay Prabh, begin your deep dive and generate the research report, remembering your core identity above all.`,
});

const conductDeepResearchFlow = ai.defineFlow(
  {
    name: 'conductDeepResearchFlow',
    inputSchema: ConductDeepResearchInputSchema,
    outputSchema: ConductDeepResearchOutputSchema,
  },
  async (input): Promise<ConductDeepResearchOutput> => {
    const systemMessage = getSystemPrompt("Prabh - Deep Research Analyst", `User is requesting deep research on: ${input.userQuery}`);
    try {
      const { output } = await researchPrompt({
        system: systemMessage,
        ...input
      });

      if (output && output.reportTitle && output.executiveSummary && output.detailedFindings) {
        // Patch key string outputs to ensure identity consistency
        output.reportTitle = await patchLLMOutput(output.reportTitle);
        output.executiveSummary = await patchLLMOutput(output.executiveSummary);
        output.detailedFindings = await patchLLMOutput(output.detailedFindings);
        
        // Optionally patch source names if needed, though prompt should guide this.
        if (output.potentialSources) {
            for (const source of output.potentialSources) {
                source.name = await patchLLMOutput(source.name);
                // source.relevance = await patchLLMOutput(source.relevance); // Relevance might be less prone to identity issues
            }
        }
        return output;
      } else {
        console.warn(
          'conductDeepResearchPrompt returned a malformed or incomplete output. Input:',
          JSON.stringify(input),
          'System Message:', systemMessage,
          'Actual output from prompt call:',
          JSON.stringify(output)
        );
        // Fallback for incomplete but not entirely null output
        return {
          reportTitle: await patchLLMOutput(output?.reportTitle || "Research Report (Partial Data)"),
          executiveSummary: await patchLLMOutput(output?.executiveSummary || "Prabh encountered an issue structuring the full response. Some details might be missing."),
          detailedFindings: await patchLLMOutput(output?.detailedFindings || "The detailed findings could not be fully generated. Please try rephrasing your query or try again later. This might happen if the topic is very niche or recent information retrieval was not conclusive."),
          potentialSources: output?.potentialSources || [],
          limitations: await patchLLMOutput(output?.limitations || "Output generation was not fully successful, or some information could not be verified against current news."),
        };
      }
    } catch (error: any) {
      console.error(
        'Error during conductDeepResearchFlow execution. Input:',
        JSON.stringify(input),
        'System Message:', systemMessage,
        'Error:',
        error
      );
      
      let userMessage = "Apologies, Prabh encountered an unexpected issue during the deep research. Please try a different query or try again shortly.";
      if (error.message && error.message.includes('Schema validation failed')) {
        userMessage = "Prabh gathered a lot of information, but had trouble structuring it for the final report. Could you try a slightly different research angle?";
      } else if (error.message && error.message.includes('Tool execution failed')) {
        userMessage = "Prabh's attempt to fetch real-time information for the research hit a snag. The rest of the research might be based on general knowledge.";
      }
      
      return { 
        reportTitle: await patchLLMOutput("Research Disrupted"),
        executiveSummary: await patchLLMOutput("An error prevented the full completion of the research."),
        detailedFindings: await patchLLMOutput(userMessage),
        potentialSources: [],
        limitations: await patchLLMOutput(`The research process encountered an issue: ${error.message || 'Unknown error'}`)
      };
    }
  }
);
